{"ast":null,"code":"var _jsxFileName = \"E:\\\\Downloads\\\\interview-scheduler\\\\interview-scheduler-frontend\\\\src\\\\components\\\\admin\\\\BulkDeleteByDate.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Button, Row, Col, Form } from \"react-bootstrap\";\nimport { toast } from \"react-toastify\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BulkDeleteByDate = ({\n  onBulkDelete,\n  entityName\n}) => {\n  _s();\n  const [start, setStart] = useState(\"\");\n  const [end, setEnd] = useState(\"\");\n  const handleDelete = async () => {\n    if (!start || !end) {\n      toast.error(\"Please select both start and end dates.\");\n      return;\n    }\n    if (new Date(start) > new Date(end)) {\n      toast.error(\"Start date must be before end date.\");\n      return;\n    }\n    if (window.confirm(`Are you sure you want to delete all ${entityName} from ${start} to ${end}?`)) {\n      try {\n        await onBulkDelete(start, end);\n        toast.success(`${entityName.charAt(0).toUpperCase() + entityName.slice(1)} deleted successfully.`);\n      } catch (error) {\n        var _error$response, _error$response$data;\n        toast.error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || `Failed to delete ${entityName}.`);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Form, {\n    className: \"mb-3\",\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        xs: \"auto\",\n        children: /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"date\",\n          value: start,\n          onChange: e => setStart(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        xs: \"auto\",\n        children: /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"date\",\n          value: end,\n          onChange: e => setEnd(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        xs: \"auto\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"danger\",\n          onClick: handleDelete,\n          children: \"Delete by Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_s(BulkDeleteByDate, \"bbHDtZEgRk7eGosuAjQBEVv8OuU=\");\n_c = BulkDeleteByDate;\nexport default BulkDeleteByDate;\nvar _c;\n$RefreshReg$(_c, \"BulkDeleteByDate\");","map":{"version":3,"names":["React","useState","Button","Row","Col","Form","toast","jsxDEV","_jsxDEV","BulkDeleteByDate","onBulkDelete","entityName","_s","start","setStart","end","setEnd","handleDelete","error","Date","window","confirm","success","charAt","toUpperCase","slice","_error$response","_error$response$data","response","data","className","children","xs","Control","type","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","variant","onClick","_c","$RefreshReg$"],"sources":["E:/Downloads/interview-scheduler/interview-scheduler-frontend/src/components/admin/BulkDeleteByDate.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { Button, Row, Col, Form } from \"react-bootstrap\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst BulkDeleteByDate = ({ onBulkDelete, entityName }) => {\r\n  const [start, setStart] = useState(\"\");\r\n  const [end, setEnd] = useState(\"\");\r\n\r\n  const handleDelete = async () => {\r\n    if (!start || !end) {\r\n      toast.error(\"Please select both start and end dates.\");\r\n      return;\r\n    }\r\n    if (new Date(start) > new Date(end)) {\r\n      toast.error(\"Start date must be before end date.\");\r\n      return;\r\n    }\r\n    if (\r\n      window.confirm(\r\n        `Are you sure you want to delete all ${entityName} from ${start} to ${end}?`\r\n      )\r\n    ) {\r\n      try {\r\n        await onBulkDelete(start, end);\r\n        toast.success(\r\n          `${entityName.charAt(0).toUpperCase() + entityName.slice(1)} deleted successfully.`\r\n        );\r\n      } catch (error) {\r\n        toast.error(error.response?.data?.error || `Failed to delete ${entityName}.`);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Form className=\"mb-3\">\r\n      <Row>\r\n        <Col xs=\"auto\">\r\n          <Form.Control type=\"date\" value={start} onChange={e => setStart(e.target.value)} />\r\n        </Col>\r\n        <Col xs=\"auto\">\r\n          <Form.Control type=\"date\" value={end} onChange={e => setEnd(e.target.value)} />\r\n        </Col>\r\n        <Col xs=\"auto\">\r\n          <Button variant=\"danger\" onClick={handleDelete}>\r\n            Delete by Date\r\n          </Button>\r\n        </Col>\r\n      </Row>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default BulkDeleteByDate;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}