{"ast":null,"code":"import axios from 'axios';\n\n// Use production URL for deployment, localhost for development\nconst API_BASE_URL = process.env.REACT_APP_API_URL || (process.env.NODE_ENV === 'production' ? 'https://interviewscheduler.marindrive.in/api' : 'http://localhost:3001/api');\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  retry: 3,\n  retryDelay: 1000\n});\n\n// Add request retry functionality\napi.interceptors.response.use(response => response, async error => {\n  const config = error.config;\n\n  // If we haven't already retried and it's a network/timeout error\n  if (!config.__retryCount && config.retry && (error.code === 'ECONNABORTED' || error.code === 'NETWORK_ERROR' || !error.response)) {\n    config.__retryCount = config.__retryCount || 0;\n    if (config.__retryCount < config.retry) {\n      config.__retryCount += 1;\n\n      // Wait before retrying\n      await new Promise(resolve => setTimeout(resolve, config.retryDelay));\n      return api(config);\n    }\n  }\n  return Promise.reject(error);\n});\n\n// Request interceptor\napi.interceptors.request.use(config => {\n  // Add auth token if available\n  const token = localStorage.getItem('authToken');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n\n  // Add timestamp for request tracking\n  config.metadata = {\n    startTime: new Date()\n  };\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor\napi.interceptors.response.use(response => {\n  return response;\n}, error => {\n  // Handle specific error cases\n  if (error.code === 'ECONNABORTED') {\n    error.userMessage = 'Request timeout. Please check your connection and try again.';\n  } else if (error.code === 'NETWORK_ERROR' || !error.response) {\n    error.userMessage = 'Network error. Please check your internet connection.';\n  } else if (error.response) {\n    var _error$response$data;\n    // Server responded with error status\n    const status = error.response.status;\n    const serverError = ((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || error.response.statusText;\n    switch (status) {\n      case 400:\n        error.userMessage = serverError || 'Invalid request. Please check your input.';\n        break;\n      case 401:\n        error.userMessage = 'Authentication required. Please log in again.';\n        localStorage.removeItem('authToken');\n        break;\n      case 403:\n        error.userMessage = 'Access denied. You don\\'t have permission for this action.';\n        break;\n      case 404:\n        error.userMessage = 'Resource not found. The requested item may no longer exist.';\n        break;\n      case 409:\n        error.userMessage = serverError || 'Conflict. This action cannot be completed.';\n        break;\n      case 422:\n        error.userMessage = serverError || 'Invalid data provided.';\n        break;\n      case 429:\n        error.userMessage = 'Too many requests. Please wait a moment and try again.';\n        break;\n      case 500:\n      case 502:\n      case 503:\n      case 504:\n        error.userMessage = 'Server error. Please try again later.';\n        break;\n      default:\n        error.userMessage = serverError || 'An unexpected error occurred.';\n    }\n  }\n  return Promise.reject(error);\n});\n\n// Helper function to check API health\nexport const checkAPIHealth = async () => {\n  try {\n    const response = await api.get('/health');\n    return {\n      healthy: true,\n      data: response.data,\n      baseURL: API_BASE_URL\n    };\n  } catch (error) {\n    return {\n      healthy: false,\n      error: error.message,\n      baseURL: API_BASE_URL\n    };\n  }\n};\n\n// Helper function to get API configuration info\nexport const getAPIInfo = () => {\n  return {\n    baseURL: API_BASE_URL,\n    timeout: api.defaults.timeout,\n    environment: process.env.NODE_ENV,\n    retryConfig: {\n      retry: api.defaults.retry,\n      retryDelay: api.defaults.retryDelay\n    }\n  };\n};\n\n// Helper function for manual retry of failed requests\nexport const retryRequest = async (originalConfig, maxRetries = 3) => {\n  let retries = 0;\n  while (retries < maxRetries) {\n    try {\n      const response = await api(originalConfig);\n      return response;\n    } catch (error) {\n      retries++;\n      if (retries >= maxRetries) {\n        throw error;\n      }\n\n      // Exponential backoff delay\n      await new Promise(resolve => setTimeout(resolve, Math.pow(2, retries) * 1000));\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","NODE_ENV","api","create","baseURL","timeout","headers","retry","retryDelay","interceptors","response","use","error","config","__retryCount","code","Promise","resolve","setTimeout","reject","request","token","localStorage","getItem","Authorization","metadata","startTime","Date","userMessage","_error$response$data","status","serverError","data","statusText","removeItem","checkAPIHealth","get","healthy","message","getAPIInfo","defaults","environment","retryConfig","retryRequest","originalConfig","maxRetries","retries","Math","pow"],"sources":["E:/Downloads/interview-scheduler/interview-scheduler-frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Use production URL for deployment, localhost for development\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || \r\n    (process.env.NODE_ENV === 'production' \r\n        ? 'https://interviewscheduler.marindrive.in/api' \r\n        : 'http://localhost:3001/api');\r\n\r\nconst api = axios.create({\r\n    baseURL: API_BASE_URL,\r\n    timeout: 30000,\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n    },\r\n    retry: 3,\r\n    retryDelay: 1000,\r\n});\r\n\r\n// Add request retry functionality\r\napi.interceptors.response.use(\r\n    (response) => response,\r\n    async (error) => {\r\n        const config = error.config;\r\n        \r\n        // If we haven't already retried and it's a network/timeout error\r\n        if (\r\n            !config.__retryCount && \r\n            config.retry && \r\n            (error.code === 'ECONNABORTED' || error.code === 'NETWORK_ERROR' || !error.response)\r\n        ) {\r\n            config.__retryCount = config.__retryCount || 0;\r\n            \r\n            if (config.__retryCount < config.retry) {\r\n                config.__retryCount += 1;\r\n                \r\n                // Wait before retrying\r\n                await new Promise(resolve => setTimeout(resolve, config.retryDelay));\r\n                \r\n                return api(config);\r\n            }\r\n        }\r\n        \r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n// Request interceptor\r\napi.interceptors.request.use(\r\n    (config) => {\r\n        // Add auth token if available\r\n        const token = localStorage.getItem('authToken');\r\n        if (token) {\r\n            config.headers.Authorization = `Bearer ${token}`;\r\n        }\r\n\r\n        // Add timestamp for request tracking\r\n        config.metadata = { startTime: new Date() };\r\n\r\n        return config;\r\n    },\r\n    (error) => {\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n// Response interceptor\r\napi.interceptors.response.use(\r\n    (response) => {\r\n        return response;\r\n    },\r\n    (error) => {\r\n        // Handle specific error cases\r\n        if (error.code === 'ECONNABORTED') {\r\n            error.userMessage = 'Request timeout. Please check your connection and try again.';\r\n        } else if (error.code === 'NETWORK_ERROR' || !error.response) {\r\n            error.userMessage = 'Network error. Please check your internet connection.';\r\n        } else if (error.response) {\r\n            // Server responded with error status\r\n            const status = error.response.status;\r\n            const serverError = error.response.data?.error || error.response.statusText;\r\n\r\n            switch (status) {\r\n                case 400:\r\n                    error.userMessage = serverError || 'Invalid request. Please check your input.';\r\n                    break;\r\n                case 401:\r\n                    error.userMessage = 'Authentication required. Please log in again.';\r\n                    localStorage.removeItem('authToken');\r\n                    break;\r\n                case 403:\r\n                    error.userMessage = 'Access denied. You don\\'t have permission for this action.';\r\n                    break;\r\n                case 404:\r\n                    error.userMessage = 'Resource not found. The requested item may no longer exist.';\r\n                    break;\r\n                case 409:\r\n                    error.userMessage = serverError || 'Conflict. This action cannot be completed.';\r\n                    break;\r\n                case 422:\r\n                    error.userMessage = serverError || 'Invalid data provided.';\r\n                    break;\r\n                case 429:\r\n                    error.userMessage = 'Too many requests. Please wait a moment and try again.';\r\n                    break;\r\n                case 500:\r\n                case 502:\r\n                case 503:\r\n                case 504:\r\n                    error.userMessage = 'Server error. Please try again later.';\r\n                    break;\r\n                default:\r\n                    error.userMessage = serverError || 'An unexpected error occurred.';\r\n            }\r\n        }\r\n\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n// Helper function to check API health\r\nexport const checkAPIHealth = async () => {\r\n    try {\r\n        const response = await api.get('/health');\r\n        return {\r\n            healthy: true,\r\n            data: response.data,\r\n            baseURL: API_BASE_URL\r\n        };\r\n    } catch (error) {\r\n        return {\r\n            healthy: false,\r\n            error: error.message,\r\n            baseURL: API_BASE_URL\r\n        };\r\n    }\r\n};\r\n\r\n// Helper function to get API configuration info\r\nexport const getAPIInfo = () => {\r\n    return {\r\n        baseURL: API_BASE_URL,\r\n        timeout: api.defaults.timeout,\r\n        environment: process.env.NODE_ENV,\r\n        retryConfig: {\r\n            retry: api.defaults.retry,\r\n            retryDelay: api.defaults.retryDelay\r\n        }\r\n    };\r\n};\r\n\r\n// Helper function for manual retry of failed requests\r\nexport const retryRequest = async (originalConfig, maxRetries = 3) => {\r\n    let retries = 0;\r\n    \r\n    while (retries < maxRetries) {\r\n        try {\r\n            const response = await api(originalConfig);\r\n            return response;\r\n        } catch (error) {\r\n            retries++;\r\n            \r\n            if (retries >= maxRetries) {\r\n                throw error;\r\n            }\r\n            \r\n            // Exponential backoff delay\r\n            await new Promise(resolve => \r\n                setTimeout(resolve, Math.pow(2, retries) * 1000)\r\n            );\r\n        }\r\n    }\r\n};\r\n\r\nexport default api;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}