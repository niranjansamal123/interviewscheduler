{"ast":null,"code":"import api from'./api';const studentService={getStudents:async()=>{try{const response=await api.get('/students');return response.data;}catch(error){console.error('Failed to get students:',error);throw error;}},addStudent:async studentData=>{try{const response=await api.post('/students',studentData);return response.data;}catch(error){console.error('Failed to add student:',error);throw error;}},downloadSampleExcel:async()=>{const response=await api.get('/students/sample-template',{responseType:'blob'});return response.data;},uploadExcel:async file=>{try{const formData=new FormData();formData.append('excel',file);const response=await api.post('/students/upload-excel',formData,{headers:{'Content-Type':'multipart/form-data'}});return response.data;}catch(error){console.error('Failed to upload Excel:',error);throw error;}},sendInvitations:async studentIds=>{if(!Array.isArray(studentIds)||studentIds.length===0){throw new Error('studentIds must be a non-empty array');}try{const validIds=studentIds.filter(id=>typeof id==='number'&&!isNaN(id));if(validIds.length===0){throw new Error('No valid student IDs to send invitations');}const response=await api.post('/students/send-invitations',{studentIds:validIds});return response.data;}catch(error){console.error('Failed to send invitations:',error);throw error;}},deleteStudent:async id=>{const response=await api.delete(\"/students/\".concat(id));return response.data;}};export default studentService;","map":{"version":3,"names":["api","studentService","getStudents","response","get","data","error","console","addStudent","studentData","post","downloadSampleExcel","responseType","uploadExcel","file","formData","FormData","append","headers","sendInvitations","studentIds","Array","isArray","length","Error","validIds","filter","id","isNaN","deleteStudent","delete","concat"],"sources":["E:/Downloads/interview-scheduler/interview-scheduler-frontend/src/services/studentService.js"],"sourcesContent":["import api from './api';\r\n\r\nconst studentService = {\r\n  getStudents: async () => {\r\n    try {\r\n      const response = await api.get('/students');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Failed to get students:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  addStudent: async (studentData) => {\r\n    try {\r\n      const response = await api.post('/students', studentData);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Failed to add student:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  downloadSampleExcel: async () => {\r\n    const response = await api.get('/students/sample-template', { responseType: 'blob' });\r\n    return response.data;\r\n  },\r\n\r\n  uploadExcel: async (file) => {\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append('excel', file);\r\n\r\n      const response = await api.post('/students/upload-excel', formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Failed to upload Excel:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  sendInvitations: async (studentIds) => {\r\n    if (!Array.isArray(studentIds) || studentIds.length === 0) {\r\n      throw new Error('studentIds must be a non-empty array');\r\n    }\r\n    try {\r\n      const validIds = studentIds.filter(id => typeof id === 'number' && !isNaN(id));\r\n      if (validIds.length === 0) {\r\n        throw new Error('No valid student IDs to send invitations');\r\n      }\r\n\r\n      const response = await api.post('/students/send-invitations', { studentIds: validIds });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Failed to send invitations:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  deleteStudent: async (id) => {\r\n    const response = await api.delete(`/students/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  \r\n};\r\n\r\nexport default studentService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}