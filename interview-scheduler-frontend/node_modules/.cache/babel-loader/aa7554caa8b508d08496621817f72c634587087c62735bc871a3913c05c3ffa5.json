{"ast":null,"code":"import api from './api';\nconst studentService = {\n  getStudents: async () => {\n    try {\n      const response = await api.get('/students');\n      return response.data;\n    } catch (error) {\n      console.error('Failed to get students:', error);\n      throw error;\n    }\n  },\n  addStudent: async studentData => {\n    try {\n      // Validate required fields (no resume field)\n      if (!studentData.name || !studentData.email || !studentData.phone) {\n        throw new Error('Name, email, and phone are required');\n      }\n      const response = await api.post('/students', {\n        name: studentData.name.trim(),\n        email: studentData.email.trim().toLowerCase(),\n        phone: studentData.phone.trim()\n        // No resumeLink field\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Failed to add student:', error);\n      throw error;\n    }\n  },\n  // Get student by token (for slot selection)\n  getStudentByToken: async token => {\n    try {\n      if (!token) {\n        throw new Error('Token is required');\n      }\n      const response = await api.get(`/students/by-token/${token}`);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to get student by token:', error);\n      throw error;\n    }\n  },\n  // Update resume by token (for slot selection)\n  updateResume: async (token, file) => {\n    try {\n      if (!token) {\n        throw new Error('Token is required');\n      }\n      if (!file) {\n        throw new Error('Resume file is required');\n      }\n      const formData = new FormData();\n      formData.append('resume', file);\n      const response = await api.put(`/students/resume/${token}`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Failed to update resume:', error);\n      throw error;\n    }\n  },\n  downloadSampleExcel: async () => {\n    try {\n      const response = await api.get('/students/sample-template', {\n        responseType: 'blob'\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Failed to download sample Excel:', error);\n      throw error;\n    }\n  },\n  uploadExcel: async file => {\n    try {\n      if (!file) {\n        throw new Error('No file selected');\n      }\n\n      // Validate file type\n      const validTypes = ['application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/vnd.ms-excel'];\n      if (!validTypes.includes(file.type)) {\n        throw new Error('Invalid file type. Please select an Excel file (.xlsx or .xls)');\n      }\n\n      // Validate file size (10MB limit)\n      const maxSize = 10 * 1024 * 1024;\n      if (file.size > maxSize) {\n        throw new Error('File size too large. Maximum size is 10MB');\n      }\n      const formData = new FormData();\n      formData.append('excel', file);\n      const response = await api.post('/students/upload-excel', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        },\n        timeout: 60000 // 60 second timeout for large files\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Failed to upload Excel:', error);\n      throw error;\n    }\n  },\n  sendInvitations: async studentIds => {\n    if (!Array.isArray(studentIds) || studentIds.length === 0) {\n      throw new Error('studentIds must be a non-empty array');\n    }\n    try {\n      const validIds = studentIds.filter(id => typeof id === 'number' && !isNaN(id));\n      if (validIds.length === 0) {\n        throw new Error('No valid student IDs to send invitations');\n      }\n      const response = await api.post('/students/send-invitations', {\n        studentIds: validIds\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Failed to send invitations:', error);\n      throw error;\n    }\n  },\n  deleteStudent: async id => {\n    try {\n      const response = await api.delete(`/students/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to delete student:', error);\n      throw error;\n    }\n  },\n  // Bulk delete students by date range\n  deleteByDate: async (start, end) => {\n    try {\n      if (!start || !end) {\n        throw new Error('Start and end dates are required');\n      }\n      const response = await api.delete(`/students/bulk?start=${start}&end=${end}`);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to bulk delete students:', error);\n      throw error;\n    }\n  },\n  // Validate resume file before upload\n  validateResumeFile: file => {\n    const allowedTypes = ['application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'];\n    const maxSize = 5 * 1024 * 1024; // 5MB\n\n    if (!file) {\n      throw new Error('No file provided');\n    }\n    if (!allowedTypes.includes(file.type)) {\n      throw new Error('Invalid file type. Only PDF, DOC, and DOCX files are allowed');\n    }\n    if (file.size > maxSize) {\n      throw new Error('File size too large. Maximum size is 5MB');\n    }\n    return true;\n  },\n  // Helper method to format file size\n  formatFileSize: bytes => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  }\n};\nexport default studentService;","map":{"version":3,"names":["api","studentService","getStudents","response","get","data","error","console","addStudent","studentData","name","email","phone","Error","post","trim","toLowerCase","getStudentByToken","token","updateResume","file","formData","FormData","append","put","headers","downloadSampleExcel","responseType","uploadExcel","validTypes","includes","type","maxSize","size","timeout","sendInvitations","studentIds","Array","isArray","length","validIds","filter","id","isNaN","deleteStudent","delete","deleteByDate","start","end","validateResumeFile","allowedTypes","formatFileSize","bytes","k","sizes","i","Math","floor","log","parseFloat","pow","toFixed"],"sources":["E:/Downloads/interview-scheduler/interview-scheduler-frontend/src/services/studentService.js"],"sourcesContent":["import api from './api';\r\n\r\nconst studentService = {\r\n  getStudents: async () => {\r\n    try {\r\n      const response = await api.get('/students');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Failed to get students:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  addStudent: async (studentData) => {\r\n    try {\r\n      // Validate required fields (no resume field)\r\n      if (!studentData.name || !studentData.email || !studentData.phone) {\r\n        throw new Error('Name, email, and phone are required');\r\n      }\r\n\r\n      const response = await api.post('/students', {\r\n        name: studentData.name.trim(),\r\n        email: studentData.email.trim().toLowerCase(),\r\n        phone: studentData.phone.trim()\r\n        // No resumeLink field\r\n      });\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Failed to add student:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get student by token (for slot selection)\r\n  getStudentByToken: async (token) => {\r\n    try {\r\n      if (!token) {\r\n        throw new Error('Token is required');\r\n      }\r\n      const response = await api.get(`/students/by-token/${token}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Failed to get student by token:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Update resume by token (for slot selection)\r\n  updateResume: async (token, file) => {\r\n    try {\r\n      if (!token) {\r\n        throw new Error('Token is required');\r\n      }\r\n      if (!file) {\r\n        throw new Error('Resume file is required');\r\n      }\r\n\r\n      const formData = new FormData();\r\n      formData.append('resume', file);\r\n      \r\n      const response = await api.put(`/students/resume/${token}`, formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Failed to update resume:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  downloadSampleExcel: async () => {\r\n    try {\r\n      const response = await api.get('/students/sample-template', { \r\n        responseType: 'blob' \r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Failed to download sample Excel:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  uploadExcel: async (file) => {\r\n    try {\r\n      if (!file) {\r\n        throw new Error('No file selected');\r\n      }\r\n\r\n      // Validate file type\r\n      const validTypes = [\r\n        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\r\n        'application/vnd.ms-excel'\r\n      ];\r\n\r\n      if (!validTypes.includes(file.type)) {\r\n        throw new Error('Invalid file type. Please select an Excel file (.xlsx or .xls)');\r\n      }\r\n\r\n      // Validate file size (10MB limit)\r\n      const maxSize = 10 * 1024 * 1024;\r\n      if (file.size > maxSize) {\r\n        throw new Error('File size too large. Maximum size is 10MB');\r\n      }\r\n\r\n      const formData = new FormData();\r\n      formData.append('excel', file);\r\n\r\n      const response = await api.post('/students/upload-excel', formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n        timeout: 60000, // 60 second timeout for large files\r\n      });\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Failed to upload Excel:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  sendInvitations: async (studentIds) => {\r\n    if (!Array.isArray(studentIds) || studentIds.length === 0) {\r\n      throw new Error('studentIds must be a non-empty array');\r\n    }\r\n    try {\r\n      const validIds = studentIds.filter(id => typeof id === 'number' && !isNaN(id));\r\n      if (validIds.length === 0) {\r\n        throw new Error('No valid student IDs to send invitations');\r\n      }\r\n\r\n      const response = await api.post('/students/send-invitations', { studentIds: validIds });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Failed to send invitations:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  deleteStudent: async (id) => {\r\n    try {\r\n      const response = await api.delete(`/students/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Failed to delete student:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Bulk delete students by date range\r\n  deleteByDate: async (start, end) => {\r\n    try {\r\n      if (!start || !end) {\r\n        throw new Error('Start and end dates are required');\r\n      }\r\n      const response = await api.delete(`/students/bulk?start=${start}&end=${end}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Failed to bulk delete students:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Validate resume file before upload\r\n  validateResumeFile: (file) => {\r\n    const allowedTypes = ['application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'];\r\n    const maxSize = 5 * 1024 * 1024; // 5MB\r\n\r\n    if (!file) {\r\n      throw new Error('No file provided');\r\n    }\r\n\r\n    if (!allowedTypes.includes(file.type)) {\r\n      throw new Error('Invalid file type. Only PDF, DOC, and DOCX files are allowed');\r\n    }\r\n\r\n    if (file.size > maxSize) {\r\n      throw new Error('File size too large. Maximum size is 5MB');\r\n    }\r\n\r\n    return true;\r\n  },\r\n\r\n  // Helper method to format file size\r\n  formatFileSize: (bytes) => {\r\n    if (bytes === 0) return '0 Bytes';\r\n    const k = 1024;\r\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\r\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\r\n  }\r\n};\r\n\r\nexport default studentService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}