{"ast":null,"code":"import api from './api';\nconst studentService = {\n  getStudents: async () => {\n    try {\n      const response = await api.get('/students');\n      return response.data;\n    } catch (error) {\n      console.error('Failed to get students:', error);\n      throw error;\n    }\n  },\n  addStudent: async studentData => {\n    try {\n      const response = await api.post('/students', studentData);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to add student:', error);\n      throw error;\n    }\n  },\n  uploadExcel: async file => {\n    try {\n      const formData = new FormData();\n      formData.append('excel', file);\n      const response = await api.post('/students/upload-excel', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Failed to upload Excel:', error);\n      throw error;\n    }\n  },\n  sendInvitations: async studentIds => {\n    if (!Array.isArray(studentIds) || studentIds.length === 0) {\n      throw new Error('studentIds must be a non-empty array');\n    }\n    try {\n      const validIds = studentIds.filter(id => typeof id === 'number' && !isNaN(id));\n      if (validIds.length === 0) {\n        throw new Error('No valid student IDs to send invitations');\n      }\n      const response = await api.post('/students/send-invitations', {\n        studentIds: validIds\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Failed to send invitations:', error);\n      throw error;\n    }\n  },\n  deleteStudent: async id => {\n    const response = await api.delete(`/students/${id}`);\n    return response.data;\n  }\n};\nexport default studentService;","map":{"version":3,"names":["api","studentService","getStudents","response","get","data","error","console","addStudent","studentData","post","uploadExcel","file","formData","FormData","append","headers","sendInvitations","studentIds","Array","isArray","length","Error","validIds","filter","id","isNaN","deleteStudent","delete"],"sources":["E:/Downloads/interview-scheduler/interview-scheduler-frontend/src/services/studentService.js"],"sourcesContent":["import api from './api';\r\n\r\nconst studentService = {\r\n  getStudents: async () => {\r\n    try {\r\n      const response = await api.get('/students');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Failed to get students:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  addStudent: async (studentData) => {\r\n    try {\r\n      const response = await api.post('/students', studentData);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Failed to add student:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  uploadExcel: async (file) => {\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append('excel', file);\r\n\r\n      const response = await api.post('/students/upload-excel', formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Failed to upload Excel:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  sendInvitations: async (studentIds) => {\r\n    if (!Array.isArray(studentIds) || studentIds.length === 0) {\r\n      throw new Error('studentIds must be a non-empty array');\r\n    }\r\n    try {\r\n      const validIds = studentIds.filter(id => typeof id === 'number' && !isNaN(id));\r\n      if (validIds.length === 0) {\r\n        throw new Error('No valid student IDs to send invitations');\r\n      }\r\n\r\n      const response = await api.post('/students/send-invitations', { studentIds: validIds });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Failed to send invitations:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  deleteStudent: async (id) => {\r\n    const response = await api.delete(`/students/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  \r\n};\r\n\r\nexport default studentService;\r\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;AAEvB,MAAMC,cAAc,GAAG;EACrBC,WAAW,EAAE,MAAAA,CAAA,KAAY;IACvB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMH,GAAG,CAACI,GAAG,CAAC,WAAW,CAAC;MAC3C,OAAOD,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C,MAAMA,KAAK;IACb;EACF,CAAC;EAEDE,UAAU,EAAE,MAAOC,WAAW,IAAK;IACjC,IAAI;MACF,MAAMN,QAAQ,GAAG,MAAMH,GAAG,CAACU,IAAI,CAAC,WAAW,EAAED,WAAW,CAAC;MACzD,OAAON,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C,MAAMA,KAAK;IACb;EACF,CAAC;EAEDK,WAAW,EAAE,MAAOC,IAAI,IAAK;IAC3B,IAAI;MACF,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;MAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEH,IAAI,CAAC;MAE9B,MAAMT,QAAQ,GAAG,MAAMH,GAAG,CAACU,IAAI,CAAC,wBAAwB,EAAEG,QAAQ,EAAE;QAClEG,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MACF,OAAOb,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C,MAAMA,KAAK;IACb;EACF,CAAC;EAEDW,eAAe,EAAE,MAAOC,UAAU,IAAK;IACrC,IAAI,CAACC,KAAK,CAACC,OAAO,CAACF,UAAU,CAAC,IAAIA,UAAU,CAACG,MAAM,KAAK,CAAC,EAAE;MACzD,MAAM,IAAIC,KAAK,CAAC,sCAAsC,CAAC;IACzD;IACA,IAAI;MACF,MAAMC,QAAQ,GAAGL,UAAU,CAACM,MAAM,CAACC,EAAE,IAAI,OAAOA,EAAE,KAAK,QAAQ,IAAI,CAACC,KAAK,CAACD,EAAE,CAAC,CAAC;MAC9E,IAAIF,QAAQ,CAACF,MAAM,KAAK,CAAC,EAAE;QACzB,MAAM,IAAIC,KAAK,CAAC,0CAA0C,CAAC;MAC7D;MAEA,MAAMnB,QAAQ,GAAG,MAAMH,GAAG,CAACU,IAAI,CAAC,4BAA4B,EAAE;QAAEQ,UAAU,EAAEK;MAAS,CAAC,CAAC;MACvF,OAAOpB,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnD,MAAMA,KAAK;IACb;EACF,CAAC;EAEDqB,aAAa,EAAE,MAAOF,EAAE,IAAK;IAC3B,MAAMtB,QAAQ,GAAG,MAAMH,GAAG,CAAC4B,MAAM,CAAC,aAAaH,EAAE,EAAE,CAAC;IACpD,OAAOtB,QAAQ,CAACE,IAAI;EACtB;AAGF,CAAC;AAED,eAAeJ,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}