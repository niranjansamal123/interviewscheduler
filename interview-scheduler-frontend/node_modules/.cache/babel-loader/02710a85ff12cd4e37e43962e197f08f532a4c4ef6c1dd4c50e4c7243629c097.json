{"ast":null,"code":"import api from'./api';const slotService={getSlots:async()=>{try{const response=await api.get('/slots');return response.data;}catch(error){throw error;}},getAvailableSlots:async()=>{try{const response=await api.get('/slots/available');return response.data;}catch(error){throw error;}},createSlot:async slotData=>{try{if(!slotData||!slotData.slotDateTime){throw new Error('Slot date and time are required');}const response=await api.post('/slots',slotData);return response.data;}catch(error){throw error;}},// Create multiple slots at once\ncreateBulkSlots:async slotsData=>{try{if(!Array.isArray(slotsData)||slotsData.length===0){throw new Error('Slots data array is required');}// Validate all slots before sending\nslotsData.forEach((slot,index)=>{if(!slot.slotDateTime){throw new Error(\"Slot \".concat(index+1,\": Date and time are required\"));}if(!slot.interviewer){throw new Error(\"Slot \".concat(index+1,\": Interviewer is required\"));}// Additional validation\nconst date=new Date(slot.slotDateTime);if(isNaN(date.getTime())){throw new Error(\"Slot \".concat(index+1,\": Invalid date format - \").concat(slot.slotDateTime));}});const requestData={slots:slotsData};const response=await api.post('/slots/bulk',requestData,{timeout:30000});return response.data.summary;}catch(error){if(error.response){var _error$response$data;const serverError=((_error$response$data=error.response.data)===null||_error$response$data===void 0?void 0:_error$response$data.error)||'Server error occurred';throw new Error(serverError);}else if(error.code==='ECONNABORTED'){throw new Error('Request timeout. The bulk operation may still be processing.');}else{throw new Error(error.message||'Failed to create bulk slots');}}},bookSlot:async(slotId,token)=>{try{// Validate input parameters\nif(!slotId){throw new Error('Slot ID is required');}if(!token){throw new Error('Authentication token is required');}// Ensure slotId is a number and token is a clean string\nconst bookingData={slotId:parseInt(slotId),token:token.trim()};// Validate slotId is a valid number\nif(isNaN(bookingData.slotId)){throw new Error('Invalid slot ID format');}const response=await api.post('/slots/book',bookingData);return response.data;}catch(error){// Enhanced error handling with specific messages\nif(error.response){var _error$response$data2;const serverError=((_error$response$data2=error.response.data)===null||_error$response$data2===void 0?void 0:_error$response$data2.error)||'Server error occurred';const statusCode=error.response.status;// Handle specific status codes\nswitch(statusCode){case 400:throw new Error(serverError);case 401:throw new Error('Authentication failed. Please check your invitation link.');case 404:throw new Error('Slot not found or invitation token is invalid.');case 409:throw new Error('Slot is no longer available. Please select another slot.');case 500:throw new Error('Server error. Please try again later.');default:throw new Error(serverError);}}else if(error.request){if(error.code==='ECONNABORTED'){throw new Error('Request timeout. Please check your connection and try again.');}throw new Error('Network error. Please check your internet connection.');}else{throw new Error(error.message||'An unexpected error occurred while booking the slot.');}}},deleteSlot:async id=>{try{if(!id){throw new Error('Slot ID is required');}const slotId=parseInt(id);if(isNaN(slotId)){throw new Error('Invalid slot ID format');}const response=await api.delete(\"/slots/\".concat(slotId));return response.data;}catch(error){var _error$response,_error$response2;if(((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status)===404){throw new Error('Slot not found');}else if(((_error$response2=error.response)===null||_error$response2===void 0?void 0:_error$response2.status)===400){var _error$response$data3;throw new Error(((_error$response$data3=error.response.data)===null||_error$response$data3===void 0?void 0:_error$response$data3.error)||'Cannot delete this slot');}throw error;}},// Bulk delete slots\ndeleteBulkSlots:async slotIds=>{try{if(!Array.isArray(slotIds)||slotIds.length===0){throw new Error('Slot IDs array is required');}const response=await api.delete('/slots/bulk',{data:{slotIds}});return response.data;}catch(error){throw error;}},// Cancel booking\ncancelBooking:async function(slotId){let reason=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'Cancelled by admin';try{if(!slotId){throw new Error('Slot ID is required');}const response=await api.delete(\"/slots/\".concat(slotId,\"/cancel\"),{data:{reason}});return response.data;}catch(error){var _error$response3,_error$response4;if(((_error$response3=error.response)===null||_error$response3===void 0?void 0:_error$response3.status)===404){throw new Error('Booking not found');}else if(((_error$response4=error.response)===null||_error$response4===void 0?void 0:_error$response4.status)===400){var _error$response$data4;throw new Error(((_error$response$data4=error.response.data)===null||_error$response$data4===void 0?void 0:_error$response$data4.error)||'Cannot cancel this booking');}throw error;}},// Helper method to validate slot data\nvalidateSlotData:slotData=>{if(!slotData){throw new Error('Slot data is required');}if(!slotData.slotDateTime){throw new Error('Slot date and time are required');}const slotDate=new Date(slotData.slotDateTime);const now=new Date();if(isNaN(slotDate.getTime())){throw new Error('Invalid date format');}if(slotDate<=now){throw new Error('Slot date must be in the future');}return true;},// Validate bulk slot data\nvalidateBulkSlotData:slotsData=>{if(!Array.isArray(slotsData)||slotsData.length===0){throw new Error('Slots data array is required');}if(slotsData.length>500){throw new Error('Cannot create more than 500 slots at once');}const errors=[];slotsData.forEach((slot,index)=>{try{slotService.validateSlotData(slot);if(!slot.interviewer){errors.push(\"Slot \".concat(index+1,\": Interviewer is required\"));}}catch(error){errors.push(\"Slot \".concat(index+1,\": \").concat(error.message));}});if(errors.length>0){throw new Error('Validation errors:\\n'+errors.join('\\n'));}return true;},// Helper method to format slot date for display\nformatSlotDateTime:dateTimeString=>{try{const date=new Date(dateTimeString);return{date:date.toLocaleDateString('en-US',{weekday:'long',year:'numeric',month:'long',day:'numeric'}),time:date.toLocaleTimeString('en-US',{hour:'2-digit',minute:'2-digit',hour12:true}),full:date.toLocaleString('en-US',{weekday:'long',year:'numeric',month:'long',day:'numeric',hour:'2-digit',minute:'2-digit',hour12:true}),isToday:date.toDateString()===new Date().toDateString(),isTomorrow:date.toDateString()===new Date(Date.now()+86400000).toDateString(),dayOfWeek:date.toLocaleDateString('en-US',{weekday:'short'}),shortDate:date.toLocaleDateString('en-US',{month:'short',day:'numeric'}),shortTime:date.toLocaleTimeString('en-US',{hour:'numeric',minute:'2-digit',hour12:true})};}catch(error){return{date:'Invalid Date',time:'Invalid Time',full:'Invalid Date/Time',isToday:false,isTomorrow:false,dayOfWeek:'---',shortDate:'---',shortTime:'---'};}},// Helper method to check if a slot is bookable\nisSlotBookable:slotDateTime=>{const slotDate=new Date(slotDateTime);const now=new Date();const bufferMinutes=30;return slotDate>new Date(now.getTime()+bufferMinutes*60*1000);},// Generate slot times based on duration\ngenerateSlotTimes:(startTime,endTime,durationMinutes)=>{try{const slots=[];const[startHour,startMinute]=startTime.split(':').map(Number);const[endHour,endMinute]=endTime.split(':').map(Number);let currentTime=new Date();currentTime.setHours(startHour,startMinute,0,0);const endDateTime=new Date();endDateTime.setHours(endHour,endMinute,0,0);while(currentTime<endDateTime){const nextSlot=new Date(currentTime.getTime()+durationMinutes*60000);if(nextSlot<=endDateTime){slots.push({time:currentTime.toTimeString().slice(0,5),display:currentTime.toLocaleTimeString('en-US',{hour:'numeric',minute:'2-digit',hour12:true}),value:currentTime.toTimeString()});}currentTime.setTime(currentTime.getTime()+durationMinutes*60000);}return slots;}catch(error){return[];}},// Calculate total slots for date range\ncalculateTotalSlots:function(startDate,endDate,startTime,endTime,duration){let skipWeekends=arguments.length>5&&arguments[5]!==undefined?arguments[5]:true;try{let totalSlots=0;const currentDate=new Date(startDate);const finalDate=new Date(endDate);while(currentDate<=finalDate){if(skipWeekends&&(currentDate.getDay()===0||currentDate.getDay()===6)){currentDate.setDate(currentDate.getDate()+1);continue;}const daySlots=slotService.generateSlotTimes(startTime,endTime,duration);totalSlots+=daySlots.length;currentDate.setDate(currentDate.getDate()+1);}return totalSlots;}catch(error){return 0;}},// Method to get slot statistics\ngetSlotStats:async()=>{try{const[allSlots,availableSlots]=await Promise.all([slotService.getSlots(),slotService.getAvailableSlots()]);const now=new Date();const today=new Date(now.getFullYear(),now.getMonth(),now.getDate());const tomorrow=new Date(today.getTime()+86400000);const stats={total:allSlots.length,available:availableSlots.length,booked:allSlots.filter(slot=>slot.IsBooked).length,today:availableSlots.filter(slot=>{const slotDate=new Date(slot.SlotDateTime);return slotDate.toDateString()===today.toDateString();}).length,tomorrow:availableSlots.filter(slot=>{const slotDate=new Date(slot.SlotDateTime);return slotDate.toDateString()===tomorrow.toDateString();}).length,upcoming:availableSlots.filter(slot=>{const slotDate=new Date(slot.SlotDateTime);return slotDate>tomorrow;}).length,thisWeek:availableSlots.filter(slot=>{const slotDate=new Date(slot.SlotDateTime);const weekFromNow=new Date(now.getTime()+7*24*60*60*1000);return slotDate<=weekFromNow;}).length,byInterviewer:allSlots.reduce((acc,slot)=>{const interviewer=slot.Interviewer||'Unassigned';acc[interviewer]=(acc[interviewer]||0)+1;return acc;},{})};return stats;}catch(error){throw error;}},// Get slots by date range\ngetSlotsByDateRange:async(startDate,endDate)=>{try{const response=await api.get('/slots/range',{params:{startDate,endDate}});return response.data;}catch(error){throw error;}},// Get slots by interviewer\ngetSlotsByInterviewer:async interviewer=>{try{const response=await api.get('/slots/interviewer',{params:{interviewer}});return response.data;}catch(error){throw error;}}};export default slotService;","map":{"version":3,"names":["api","slotService","getSlots","response","get","data","error","getAvailableSlots","createSlot","slotData","slotDateTime","Error","post","createBulkSlots","slotsData","Array","isArray","length","forEach","slot","index","concat","interviewer","date","Date","isNaN","getTime","requestData","slots","timeout","summary","_error$response$data","serverError","code","message","bookSlot","slotId","token","bookingData","parseInt","trim","_error$response$data2","statusCode","status","request","deleteSlot","id","delete","_error$response","_error$response2","_error$response$data3","deleteBulkSlots","slotIds","cancelBooking","reason","arguments","undefined","_error$response3","_error$response4","_error$response$data4","validateSlotData","slotDate","now","validateBulkSlotData","errors","push","join","formatSlotDateTime","dateTimeString","toLocaleDateString","weekday","year","month","day","time","toLocaleTimeString","hour","minute","hour12","full","toLocaleString","isToday","toDateString","isTomorrow","dayOfWeek","shortDate","shortTime","isSlotBookable","bufferMinutes","generateSlotTimes","startTime","endTime","durationMinutes","startHour","startMinute","split","map","Number","endHour","endMinute","currentTime","setHours","endDateTime","nextSlot","toTimeString","slice","display","value","setTime","calculateTotalSlots","startDate","endDate","duration","skipWeekends","totalSlots","currentDate","finalDate","getDay","setDate","getDate","daySlots","getSlotStats","allSlots","availableSlots","Promise","all","today","getFullYear","getMonth","tomorrow","stats","total","available","booked","filter","IsBooked","SlotDateTime","upcoming","thisWeek","weekFromNow","byInterviewer","reduce","acc","Interviewer","getSlotsByDateRange","params","getSlotsByInterviewer"],"sources":["E:/Downloads/interview-scheduler/interview-scheduler-frontend/src/services/slotService.js"],"sourcesContent":["import api from './api';\r\n\r\nconst slotService = {\r\n    getSlots: async () => {\r\n        try {\r\n            const response = await api.get('/slots');\r\n            return response.data;\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    getAvailableSlots: async () => {\r\n        try {\r\n            const response = await api.get('/slots/available');\r\n            return response.data;\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    createSlot: async (slotData) => {\r\n        try {\r\n            if (!slotData || !slotData.slotDateTime) {\r\n                throw new Error('Slot date and time are required');\r\n            }\r\n\r\n            const response = await api.post('/slots', slotData);\r\n            return response.data;\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    // Create multiple slots at once\r\n    createBulkSlots: async (slotsData) => {\r\n        try {\r\n            if (!Array.isArray(slotsData) || slotsData.length === 0) {\r\n                throw new Error('Slots data array is required');\r\n            }\r\n\r\n            // Validate all slots before sending\r\n            slotsData.forEach((slot, index) => {\r\n                if (!slot.slotDateTime) {\r\n                    throw new Error(`Slot ${index + 1}: Date and time are required`);\r\n                }\r\n                if (!slot.interviewer) {\r\n                    throw new Error(`Slot ${index + 1}: Interviewer is required`);\r\n                }\r\n\r\n                // Additional validation\r\n                const date = new Date(slot.slotDateTime);\r\n                if (isNaN(date.getTime())) {\r\n                    throw new Error(`Slot ${index + 1}: Invalid date format - ${slot.slotDateTime}`);\r\n                }\r\n            });\r\n\r\n            const requestData = { slots: slotsData };\r\n\r\n            const response = await api.post('/slots/bulk', requestData, {\r\n                timeout: 30000\r\n            });\r\n\r\n            return response.data.summary;\r\n        } catch (error) {\r\n            if (error.response) {\r\n                const serverError = error.response.data?.error || 'Server error occurred';\r\n                throw new Error(serverError);\r\n            } else if (error.code === 'ECONNABORTED') {\r\n                throw new Error('Request timeout. The bulk operation may still be processing.');\r\n            } else {\r\n                throw new Error(error.message || 'Failed to create bulk slots');\r\n            }\r\n        }\r\n    },\r\n\r\n    bookSlot: async (slotId, token) => {\r\n        try {\r\n            // Validate input parameters\r\n            if (!slotId) {\r\n                throw new Error('Slot ID is required');\r\n            }\r\n            \r\n            if (!token) {\r\n                throw new Error('Authentication token is required');\r\n            }\r\n\r\n            // Ensure slotId is a number and token is a clean string\r\n            const bookingData = {\r\n                slotId: parseInt(slotId), \r\n                token: token.trim()\r\n            };\r\n\r\n            // Validate slotId is a valid number\r\n            if (isNaN(bookingData.slotId)) {\r\n                throw new Error('Invalid slot ID format');\r\n            }\r\n\r\n            const response = await api.post('/slots/book', bookingData);\r\n            return response.data;\r\n        } catch (error) {\r\n            // Enhanced error handling with specific messages\r\n            if (error.response) {\r\n                const serverError = error.response.data?.error || 'Server error occurred';\r\n                const statusCode = error.response.status;\r\n                \r\n                // Handle specific status codes\r\n                switch (statusCode) {\r\n                    case 400:\r\n                        throw new Error(serverError);\r\n                    case 401:\r\n                        throw new Error('Authentication failed. Please check your invitation link.');\r\n                    case 404:\r\n                        throw new Error('Slot not found or invitation token is invalid.');\r\n                    case 409:\r\n                        throw new Error('Slot is no longer available. Please select another slot.');\r\n                    case 500:\r\n                        throw new Error('Server error. Please try again later.');\r\n                    default:\r\n                        throw new Error(serverError);\r\n                }\r\n            } else if (error.request) {\r\n                if (error.code === 'ECONNABORTED') {\r\n                    throw new Error('Request timeout. Please check your connection and try again.');\r\n                }\r\n                throw new Error('Network error. Please check your internet connection.');\r\n            } else {\r\n                throw new Error(error.message || 'An unexpected error occurred while booking the slot.');\r\n            }\r\n        }\r\n    },\r\n\r\n    deleteSlot: async (id) => {\r\n        try {\r\n            if (!id) {\r\n                throw new Error('Slot ID is required');\r\n            }\r\n\r\n            const slotId = parseInt(id);\r\n            if (isNaN(slotId)) {\r\n                throw new Error('Invalid slot ID format');\r\n            }\r\n\r\n            const response = await api.delete(`/slots/${slotId}`);\r\n            return response.data;\r\n        } catch (error) {\r\n            if (error.response?.status === 404) {\r\n                throw new Error('Slot not found');\r\n            } else if (error.response?.status === 400) {\r\n                throw new Error(error.response.data?.error || 'Cannot delete this slot');\r\n            }\r\n            \r\n            throw error;\r\n        }\r\n    },\r\n\r\n    // Bulk delete slots\r\n    deleteBulkSlots: async (slotIds) => {\r\n        try {\r\n            if (!Array.isArray(slotIds) || slotIds.length === 0) {\r\n                throw new Error('Slot IDs array is required');\r\n            }\r\n\r\n            const response = await api.delete('/slots/bulk', {\r\n                data: { slotIds }\r\n            });\r\n\r\n            return response.data;\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    // Cancel booking\r\n    cancelBooking: async (slotId, reason = 'Cancelled by admin') => {\r\n        try {\r\n            if (!slotId) {\r\n                throw new Error('Slot ID is required');\r\n            }\r\n\r\n            const response = await api.delete(`/slots/${slotId}/cancel`, {\r\n                data: { reason }\r\n            });\r\n\r\n            return response.data;\r\n        } catch (error) {\r\n            if (error.response?.status === 404) {\r\n                throw new Error('Booking not found');\r\n            } else if (error.response?.status === 400) {\r\n                throw new Error(error.response.data?.error || 'Cannot cancel this booking');\r\n            }\r\n            \r\n            throw error;\r\n        }\r\n    },\r\n\r\n    // Helper method to validate slot data\r\n    validateSlotData: (slotData) => {\r\n        if (!slotData) {\r\n            throw new Error('Slot data is required');\r\n        }\r\n\r\n        if (!slotData.slotDateTime) {\r\n            throw new Error('Slot date and time are required');\r\n        }\r\n\r\n        const slotDate = new Date(slotData.slotDateTime);\r\n        const now = new Date();\r\n\r\n        if (isNaN(slotDate.getTime())) {\r\n            throw new Error('Invalid date format');\r\n        }\r\n\r\n        if (slotDate <= now) {\r\n            throw new Error('Slot date must be in the future');\r\n        }\r\n\r\n        return true;\r\n    },\r\n\r\n    // Validate bulk slot data\r\n    validateBulkSlotData: (slotsData) => {\r\n        if (!Array.isArray(slotsData) || slotsData.length === 0) {\r\n            throw new Error('Slots data array is required');\r\n        }\r\n\r\n        if (slotsData.length > 500) {\r\n            throw new Error('Cannot create more than 500 slots at once');\r\n        }\r\n\r\n        const errors = [];\r\n        slotsData.forEach((slot, index) => {\r\n            try {\r\n                slotService.validateSlotData(slot);\r\n                \r\n                if (!slot.interviewer) {\r\n                    errors.push(`Slot ${index + 1}: Interviewer is required`);\r\n                }\r\n            } catch (error) {\r\n                errors.push(`Slot ${index + 1}: ${error.message}`);\r\n            }\r\n        });\r\n\r\n        if (errors.length > 0) {\r\n            throw new Error('Validation errors:\\n' + errors.join('\\n'));\r\n        }\r\n\r\n        return true;\r\n    },\r\n\r\n    // Helper method to format slot date for display\r\n    formatSlotDateTime: (dateTimeString) => {\r\n        try {\r\n            const date = new Date(dateTimeString);\r\n            return {\r\n                date: date.toLocaleDateString('en-US', {\r\n                    weekday: 'long',\r\n                    year: 'numeric',\r\n                    month: 'long',\r\n                    day: 'numeric'\r\n                }),\r\n                time: date.toLocaleTimeString('en-US', {\r\n                    hour: '2-digit',\r\n                    minute: '2-digit',\r\n                    hour12: true\r\n                }),\r\n                full: date.toLocaleString('en-US', {\r\n                    weekday: 'long',\r\n                    year: 'numeric',\r\n                    month: 'long',\r\n                    day: 'numeric',\r\n                    hour: '2-digit',\r\n                    minute: '2-digit',\r\n                    hour12: true\r\n                }),\r\n                isToday: date.toDateString() === new Date().toDateString(),\r\n                isTomorrow: date.toDateString() === new Date(Date.now() + 86400000).toDateString(),\r\n                dayOfWeek: date.toLocaleDateString('en-US', { weekday: 'short' }),\r\n                shortDate: date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' }),\r\n                shortTime: date.toLocaleTimeString('en-US', { \r\n                    hour: 'numeric', \r\n                    minute: '2-digit',\r\n                    hour12: true \r\n                })\r\n            };\r\n        } catch (error) {\r\n            return {\r\n                date: 'Invalid Date',\r\n                time: 'Invalid Time',\r\n                full: 'Invalid Date/Time',\r\n                isToday: false,\r\n                isTomorrow: false,\r\n                dayOfWeek: '---',\r\n                shortDate: '---',\r\n                shortTime: '---'\r\n            };\r\n        }\r\n    },\r\n\r\n    // Helper method to check if a slot is bookable\r\n    isSlotBookable: (slotDateTime) => {\r\n        const slotDate = new Date(slotDateTime);\r\n        const now = new Date();\r\n        const bufferMinutes = 30;\r\n        \r\n        return slotDate > new Date(now.getTime() + (bufferMinutes * 60 * 1000));\r\n    },\r\n\r\n    // Generate slot times based on duration\r\n    generateSlotTimes: (startTime, endTime, durationMinutes) => {\r\n        try {\r\n            const slots = [];\r\n            \r\n            const [startHour, startMinute] = startTime.split(':').map(Number);\r\n            const [endHour, endMinute] = endTime.split(':').map(Number);\r\n            \r\n            let currentTime = new Date();\r\n            currentTime.setHours(startHour, startMinute, 0, 0);\r\n            \r\n            const endDateTime = new Date();\r\n            endDateTime.setHours(endHour, endMinute, 0, 0);\r\n            \r\n            while (currentTime < endDateTime) {\r\n                const nextSlot = new Date(currentTime.getTime() + (durationMinutes * 60000));\r\n                if (nextSlot <= endDateTime) {\r\n                    slots.push({\r\n                        time: currentTime.toTimeString().slice(0, 5),\r\n                        display: currentTime.toLocaleTimeString('en-US', { \r\n                            hour: 'numeric', \r\n                            minute: '2-digit',\r\n                            hour12: true \r\n                        }),\r\n                        value: currentTime.toTimeString()\r\n                    });\r\n                }\r\n                currentTime.setTime(currentTime.getTime() + (durationMinutes * 60000));\r\n            }\r\n            \r\n            return slots;\r\n        } catch (error) {\r\n            return [];\r\n        }\r\n    },\r\n\r\n    // Calculate total slots for date range\r\n    calculateTotalSlots: (startDate, endDate, startTime, endTime, duration, skipWeekends = true) => {\r\n        try {\r\n            let totalSlots = 0;\r\n            const currentDate = new Date(startDate);\r\n            const finalDate = new Date(endDate);\r\n\r\n            while (currentDate <= finalDate) {\r\n                if (skipWeekends && (currentDate.getDay() === 0 || currentDate.getDay() === 6)) {\r\n                    currentDate.setDate(currentDate.getDate() + 1);\r\n                    continue;\r\n                }\r\n\r\n                const daySlots = slotService.generateSlotTimes(startTime, endTime, duration);\r\n                totalSlots += daySlots.length;\r\n\r\n                currentDate.setDate(currentDate.getDate() + 1);\r\n            }\r\n\r\n            return totalSlots;\r\n        } catch (error) {\r\n            return 0;\r\n        }\r\n    },\r\n\r\n    // Method to get slot statistics\r\n    getSlotStats: async () => {\r\n        try {\r\n            const [allSlots, availableSlots] = await Promise.all([\r\n                slotService.getSlots(),\r\n                slotService.getAvailableSlots()\r\n            ]);\r\n\r\n            const now = new Date();\r\n            const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\r\n            const tomorrow = new Date(today.getTime() + 86400000);\r\n\r\n            const stats = {\r\n                total: allSlots.length,\r\n                available: availableSlots.length,\r\n                booked: allSlots.filter(slot => slot.IsBooked).length,\r\n                today: availableSlots.filter(slot => {\r\n                    const slotDate = new Date(slot.SlotDateTime);\r\n                    return slotDate.toDateString() === today.toDateString();\r\n                }).length,\r\n                tomorrow: availableSlots.filter(slot => {\r\n                    const slotDate = new Date(slot.SlotDateTime);\r\n                    return slotDate.toDateString() === tomorrow.toDateString();\r\n                }).length,\r\n                upcoming: availableSlots.filter(slot => {\r\n                    const slotDate = new Date(slot.SlotDateTime);\r\n                    return slotDate > tomorrow;\r\n                }).length,\r\n                thisWeek: availableSlots.filter(slot => {\r\n                    const slotDate = new Date(slot.SlotDateTime);\r\n                    const weekFromNow = new Date(now.getTime() + (7 * 24 * 60 * 60 * 1000));\r\n                    return slotDate <= weekFromNow;\r\n                }).length,\r\n                byInterviewer: allSlots.reduce((acc, slot) => {\r\n                    const interviewer = slot.Interviewer || 'Unassigned';\r\n                    acc[interviewer] = (acc[interviewer] || 0) + 1;\r\n                    return acc;\r\n                }, {})\r\n            };\r\n\r\n            return stats;\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    // Get slots by date range\r\n    getSlotsByDateRange: async (startDate, endDate) => {\r\n        try {\r\n            const response = await api.get('/slots/range', {\r\n                params: { startDate, endDate }\r\n            });\r\n            return response.data;\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    // Get slots by interviewer\r\n    getSlotsByInterviewer: async (interviewer) => {\r\n        try {\r\n            const response = await api.get('/slots/interviewer', {\r\n                params: { interviewer }\r\n            });\r\n            return response.data;\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n};\r\n\r\nexport default slotService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}