{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\nconst authService = {\n  // Login admin\n  login: async (username, password) => {\n    try {\n      const response = await axios.post(`${API_BASE_URL}/auth/login`, {\n        username: username.trim(),\n        password: password\n      });\n      return response.data;\n    } catch (error) {\n      if (error.response) {\n        throw new Error(error.response.data.message || 'Login failed');\n      }\n      throw new Error('Network error. Please check your connection.');\n    }\n  },\n  // Verify token\n  verifyToken: async token => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/auth/verify-token`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Token verification failed');\n    }\n  },\n  // Change password\n  changePassword: async (currentPassword, newPassword) => {\n    try {\n      const token = localStorage.getItem('adminToken');\n      const response = await axios.post(`${API_BASE_URL}/auth/change-password`, {\n        currentPassword,\n        newPassword\n      }, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Password change failed');\n    }\n  },\n  // Logout\n  logout: () => {\n    localStorage.removeItem('adminToken');\n    localStorage.removeItem('adminInfo');\n  },\n  // Get stored token\n  getToken: () => {\n    return localStorage.getItem('adminToken');\n  },\n  // Get stored admin info\n  getAdminInfo: () => {\n    const adminInfo = localStorage.getItem('adminInfo');\n    return adminInfo ? JSON.parse(adminInfo) : null;\n  },\n  // Check if user is authenticated\n  isAuthenticated: () => {\n    const token = authService.getToken();\n    return !!token;\n  }\n};\nexport default authService;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","authService","login","username","password","response","post","trim","data","error","Error","message","verifyToken","token","get","headers","_error$response","_error$response$data","changePassword","currentPassword","newPassword","localStorage","getItem","_error$response2","_error$response2$data","logout","removeItem","getToken","getAdminInfo","adminInfo","JSON","parse","isAuthenticated"],"sources":["E:/Downloads/interview-scheduler/interview-scheduler-frontend/src/services/authService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\r\n\r\nconst authService = {\r\n  // Login admin\r\n  login: async (username, password) => {\r\n    try {\r\n      const response = await axios.post(`${API_BASE_URL}/auth/login`, {\r\n        username: username.trim(),\r\n        password: password\r\n      });\r\n\r\n      return response.data;\r\n    } catch (error) {\r\n      if (error.response) {\r\n        throw new Error(error.response.data.message || 'Login failed');\r\n      }\r\n      throw new Error('Network error. Please check your connection.');\r\n    }\r\n  },\r\n\r\n  // Verify token\r\n  verifyToken: async (token) => {\r\n    try {\r\n      const response = await axios.get(`${API_BASE_URL}/auth/verify-token`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`\r\n        }\r\n      });\r\n\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(error.response?.data?.message || 'Token verification failed');\r\n    }\r\n  },\r\n\r\n  // Change password\r\n  changePassword: async (currentPassword, newPassword) => {\r\n    try {\r\n      const token = localStorage.getItem('adminToken');\r\n      const response = await axios.post(\r\n        `${API_BASE_URL}/auth/change-password`,\r\n        {\r\n          currentPassword,\r\n          newPassword\r\n        },\r\n        {\r\n          headers: {\r\n            'Authorization': `Bearer ${token}`\r\n          }\r\n        }\r\n      );\r\n\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(error.response?.data?.message || 'Password change failed');\r\n    }\r\n  },\r\n\r\n  // Logout\r\n  logout: () => {\r\n    localStorage.removeItem('adminToken');\r\n    localStorage.removeItem('adminInfo');\r\n  },\r\n\r\n  // Get stored token\r\n  getToken: () => {\r\n    return localStorage.getItem('adminToken');\r\n  },\r\n\r\n  // Get stored admin info\r\n  getAdminInfo: () => {\r\n    const adminInfo = localStorage.getItem('adminInfo');\r\n    return adminInfo ? JSON.parse(adminInfo) : null;\r\n  },\r\n\r\n  // Check if user is authenticated\r\n  isAuthenticated: () => {\r\n    const token = authService.getToken();\r\n    return !!token;\r\n  }\r\n};\r\n\r\nexport default authService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}