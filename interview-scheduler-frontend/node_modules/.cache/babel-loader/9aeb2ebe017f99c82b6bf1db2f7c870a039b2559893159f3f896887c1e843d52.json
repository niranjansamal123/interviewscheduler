{"ast":null,"code":"import React,{useState,useEffect}from'react';import{useSearchParams,useNavigate}from'react-router-dom';import{Container,Row,Col,Card,Button,Alert,Spinner}from'react-bootstrap';import{toast}from'react-toastify';import slotService from'../../services/slotService';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const SlotSelection=()=>{const[searchParams]=useSearchParams();const navigate=useNavigate();const token=searchParams.get('token');const[availableSlots,setAvailableSlots]=useState([]);const[loading,setLoading]=useState(true);const[booking,setBooking]=useState(false);const[selectedSlot,setSelectedSlot]=useState(null);useEffect(()=>{if(!token){navigate('/error');return;}loadAvailableSlots();},[token,navigate]);const loadAvailableSlots=async()=>{try{const slots=await slotService.getAvailableSlots();setAvailableSlots(slots);}catch(error){toast.error('Failed to load available slots');}finally{setLoading(false);}};const handleSlotSelection=async slotId=>{setBooking(true);try{const result=await slotService.bookSlot(slotId,token);toast.success('Interview slot booked successfully!');navigate('/student/booking-confirmation',{state:{slotDateTime:result.slotDateTime,meetingLink:result.meetingLink}});}catch(error){toast.error('Failed to book slot. Please try again.');}finally{setBooking(false);}};if(loading){return/*#__PURE__*/_jsx(Container,{className:\"d-flex justify-content-center align-items-center\",style:{minHeight:'50vh'},children:/*#__PURE__*/_jsx(Spinner,{animation:\"border\",role:\"status\",children:/*#__PURE__*/_jsx(\"span\",{className:\"visually-hidden\",children:\"Loading...\"})})});}return/*#__PURE__*/_jsx(Container,{className:\"py-5\",children:/*#__PURE__*/_jsx(Row,{className:\"justify-content-center\",children:/*#__PURE__*/_jsx(Col,{md:8,children:/*#__PURE__*/_jsxs(Card,{children:[/*#__PURE__*/_jsxs(Card.Header,{className:\"text-center\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Select Your Interview Slot\"}),/*#__PURE__*/_jsx(\"p\",{className:\"text-muted\",children:\"Choose an available time slot for your interview\"})]}),/*#__PURE__*/_jsx(Card.Body,{children:availableSlots.length===0?/*#__PURE__*/_jsxs(Alert,{variant:\"warning\",className:\"text-center\",children:[/*#__PURE__*/_jsx(Alert.Heading,{children:\"No Available Slots\"}),/*#__PURE__*/_jsx(\"p\",{children:\"There are currently no available interview slots. Please check back later or contact HR.\"})]}):/*#__PURE__*/_jsx(Row,{children:availableSlots.map(slot=>/*#__PURE__*/_jsx(Col,{md:6,className:\"mb-3\",children:/*#__PURE__*/_jsx(Card,{className:\"slot-card \".concat(selectedSlot===slot.Id?'border-primary':''),style:{cursor:'pointer'},onClick:()=>setSelectedSlot(slot.Id),children:/*#__PURE__*/_jsxs(Card.Body,{className:\"text-center\",children:[/*#__PURE__*/_jsx(\"h5\",{children:new Date(slot.SlotDateTime).toLocaleDateString()}),/*#__PURE__*/_jsx(\"p\",{className:\"mb-2\",children:new Date(slot.SlotDateTime).toLocaleTimeString([],{hour:'2-digit',minute:'2-digit'})}),/*#__PURE__*/_jsx(Button,{variant:selectedSlot===slot.Id?'primary':'outline-primary',size:\"sm\",onClick:e=>{e.stopPropagation();handleSlotSelection(slot.Id);},disabled:booking,children:booking&&selectedSlot===slot.Id?'Booking...':'Select This Slot'})]})})},slot.Id))})})]})})})});};export default SlotSelection;","map":{"version":3,"names":["React","useState","useEffect","useSearchParams","useNavigate","Container","Row","Col","Card","Button","Alert","Spinner","toast","slotService","jsx","_jsx","jsxs","_jsxs","SlotSelection","searchParams","navigate","token","get","availableSlots","setAvailableSlots","loading","setLoading","booking","setBooking","selectedSlot","setSelectedSlot","loadAvailableSlots","slots","getAvailableSlots","error","handleSlotSelection","slotId","result","bookSlot","success","state","slotDateTime","meetingLink","className","style","minHeight","children","animation","role","md","Header","Body","length","variant","Heading","map","slot","concat","Id","cursor","onClick","Date","SlotDateTime","toLocaleDateString","toLocaleTimeString","hour","minute","size","e","stopPropagation","disabled"],"sources":["E:/Downloads/interview-scheduler/interview-scheduler-frontend/src/components/student/SlotSelection.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useSearchParams, useNavigate } from 'react-router-dom';\r\nimport { Container, Row, Col, Card, Button, Alert, Spinner } from 'react-bootstrap';\r\nimport { toast } from 'react-toastify';\r\nimport slotService from '../../services/slotService';\r\n\r\nconst SlotSelection = () => {\r\n    const [searchParams] = useSearchParams();\r\n    const navigate = useNavigate();\r\n    const token = searchParams.get('token');\r\n    \r\n    const [availableSlots, setAvailableSlots] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [booking, setBooking] = useState(false);\r\n    const [selectedSlot, setSelectedSlot] = useState(null);\r\n\r\n    useEffect(() => {\r\n        if (!token) {\r\n            navigate('/error');\r\n            return;\r\n        }\r\n        loadAvailableSlots();\r\n    }, [token, navigate]);\r\n\r\n    const loadAvailableSlots = async () => {\r\n        try {\r\n            const slots = await slotService.getAvailableSlots();\r\n            setAvailableSlots(slots);\r\n        } catch (error) {\r\n            toast.error('Failed to load available slots');\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleSlotSelection = async (slotId) => {\r\n        setBooking(true);\r\n        try {\r\n            const result = await slotService.bookSlot(slotId, token);\r\n            toast.success('Interview slot booked successfully!');\r\n            navigate('/student/booking-confirmation', { \r\n                state: { \r\n                    slotDateTime: result.slotDateTime,\r\n                    meetingLink: result.meetingLink \r\n                } \r\n            });\r\n        } catch (error) {\r\n            toast.error('Failed to book slot. Please try again.');\r\n        } finally {\r\n            setBooking(false);\r\n        }\r\n    };\r\n\r\n    if (loading) {\r\n        return (\r\n            <Container className=\"d-flex justify-content-center align-items-center\" style={{ minHeight: '50vh' }}>\r\n                <Spinner animation=\"border\" role=\"status\">\r\n                    <span className=\"visually-hidden\">Loading...</span>\r\n                </Spinner>\r\n            </Container>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Container className=\"py-5\">\r\n            <Row className=\"justify-content-center\">\r\n                <Col md={8}>\r\n                    <Card>\r\n                        <Card.Header className=\"text-center\">\r\n                            <h3>Select Your Interview Slot</h3>\r\n                            <p className=\"text-muted\">Choose an available time slot for your interview</p>\r\n                        </Card.Header>\r\n                        <Card.Body>\r\n                            {availableSlots.length === 0 ? (\r\n                                <Alert variant=\"warning\" className=\"text-center\">\r\n                                    <Alert.Heading>No Available Slots</Alert.Heading>\r\n                                    <p>There are currently no available interview slots. Please check back later or contact HR.</p>\r\n                                </Alert>\r\n                            ) : (\r\n                                <Row>\r\n                                    {availableSlots.map(slot => (\r\n                                        <Col md={6} key={slot.Id} className=\"mb-3\">\r\n                                            <Card \r\n                                                className={`slot-card ${selectedSlot === slot.Id ? 'border-primary' : ''}`}\r\n                                                style={{ cursor: 'pointer' }}\r\n                                                onClick={() => setSelectedSlot(slot.Id)}\r\n                                            >\r\n                                                <Card.Body className=\"text-center\">\r\n                                                    <h5>{new Date(slot.SlotDateTime).toLocaleDateString()}</h5>\r\n                                                    <p className=\"mb-2\">\r\n                                                        {new Date(slot.SlotDateTime).toLocaleTimeString([], { \r\n                                                            hour: '2-digit', \r\n                                                            minute: '2-digit' \r\n                                                        })}\r\n                                                    </p>\r\n                                                    <Button\r\n                                                        variant={selectedSlot === slot.Id ? 'primary' : 'outline-primary'}\r\n                                                        size=\"sm\"\r\n                                                        onClick={(e) => {\r\n                                                            e.stopPropagation();\r\n                                                            handleSlotSelection(slot.Id);\r\n                                                        }}\r\n                                                        disabled={booking}\r\n                                                    >\r\n                                                        {booking && selectedSlot === slot.Id ? \r\n                                                            'Booking...' : 'Select This Slot'\r\n                                                        }\r\n                                                    </Button>\r\n                                                </Card.Body>\r\n                                            </Card>\r\n                                        </Col>\r\n                                    ))}\r\n                                </Row>\r\n                            )}\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default SlotSelection;\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAClD,OAASC,eAAe,CAAEC,WAAW,KAAQ,kBAAkB,CAC/D,OAASC,SAAS,CAAEC,GAAG,CAAEC,GAAG,CAAEC,IAAI,CAAEC,MAAM,CAAEC,KAAK,CAAEC,OAAO,KAAQ,iBAAiB,CACnF,OAASC,KAAK,KAAQ,gBAAgB,CACtC,MAAO,CAAAC,WAAW,KAAM,4BAA4B,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAErD,KAAM,CAAAC,aAAa,CAAGA,CAAA,GAAM,CACxB,KAAM,CAACC,YAAY,CAAC,CAAGhB,eAAe,CAAC,CAAC,CACxC,KAAM,CAAAiB,QAAQ,CAAGhB,WAAW,CAAC,CAAC,CAC9B,KAAM,CAAAiB,KAAK,CAAGF,YAAY,CAACG,GAAG,CAAC,OAAO,CAAC,CAEvC,KAAM,CAACC,cAAc,CAAEC,iBAAiB,CAAC,CAAGvB,QAAQ,CAAC,EAAE,CAAC,CACxD,KAAM,CAACwB,OAAO,CAAEC,UAAU,CAAC,CAAGzB,QAAQ,CAAC,IAAI,CAAC,CAC5C,KAAM,CAAC0B,OAAO,CAAEC,UAAU,CAAC,CAAG3B,QAAQ,CAAC,KAAK,CAAC,CAC7C,KAAM,CAAC4B,YAAY,CAAEC,eAAe,CAAC,CAAG7B,QAAQ,CAAC,IAAI,CAAC,CAEtDC,SAAS,CAAC,IAAM,CACZ,GAAI,CAACmB,KAAK,CAAE,CACRD,QAAQ,CAAC,QAAQ,CAAC,CAClB,OACJ,CACAW,kBAAkB,CAAC,CAAC,CACxB,CAAC,CAAE,CAACV,KAAK,CAAED,QAAQ,CAAC,CAAC,CAErB,KAAM,CAAAW,kBAAkB,CAAG,KAAAA,CAAA,GAAY,CACnC,GAAI,CACA,KAAM,CAAAC,KAAK,CAAG,KAAM,CAAAnB,WAAW,CAACoB,iBAAiB,CAAC,CAAC,CACnDT,iBAAiB,CAACQ,KAAK,CAAC,CAC5B,CAAE,MAAOE,KAAK,CAAE,CACZtB,KAAK,CAACsB,KAAK,CAAC,gCAAgC,CAAC,CACjD,CAAC,OAAS,CACNR,UAAU,CAAC,KAAK,CAAC,CACrB,CACJ,CAAC,CAED,KAAM,CAAAS,mBAAmB,CAAG,KAAO,CAAAC,MAAM,EAAK,CAC1CR,UAAU,CAAC,IAAI,CAAC,CAChB,GAAI,CACA,KAAM,CAAAS,MAAM,CAAG,KAAM,CAAAxB,WAAW,CAACyB,QAAQ,CAACF,MAAM,CAAEf,KAAK,CAAC,CACxDT,KAAK,CAAC2B,OAAO,CAAC,qCAAqC,CAAC,CACpDnB,QAAQ,CAAC,+BAA+B,CAAE,CACtCoB,KAAK,CAAE,CACHC,YAAY,CAAEJ,MAAM,CAACI,YAAY,CACjCC,WAAW,CAAEL,MAAM,CAACK,WACxB,CACJ,CAAC,CAAC,CACN,CAAE,MAAOR,KAAK,CAAE,CACZtB,KAAK,CAACsB,KAAK,CAAC,wCAAwC,CAAC,CACzD,CAAC,OAAS,CACNN,UAAU,CAAC,KAAK,CAAC,CACrB,CACJ,CAAC,CAED,GAAIH,OAAO,CAAE,CACT,mBACIV,IAAA,CAACV,SAAS,EAACsC,SAAS,CAAC,kDAAkD,CAACC,KAAK,CAAE,CAAEC,SAAS,CAAE,MAAO,CAAE,CAAAC,QAAA,cACjG/B,IAAA,CAACJ,OAAO,EAACoC,SAAS,CAAC,QAAQ,CAACC,IAAI,CAAC,QAAQ,CAAAF,QAAA,cACrC/B,IAAA,SAAM4B,SAAS,CAAC,iBAAiB,CAAAG,QAAA,CAAC,YAAU,CAAM,CAAC,CAC9C,CAAC,CACH,CAAC,CAEpB,CAEA,mBACI/B,IAAA,CAACV,SAAS,EAACsC,SAAS,CAAC,MAAM,CAAAG,QAAA,cACvB/B,IAAA,CAACT,GAAG,EAACqC,SAAS,CAAC,wBAAwB,CAAAG,QAAA,cACnC/B,IAAA,CAACR,GAAG,EAAC0C,EAAE,CAAE,CAAE,CAAAH,QAAA,cACP7B,KAAA,CAACT,IAAI,EAAAsC,QAAA,eACD7B,KAAA,CAACT,IAAI,CAAC0C,MAAM,EAACP,SAAS,CAAC,aAAa,CAAAG,QAAA,eAChC/B,IAAA,OAAA+B,QAAA,CAAI,4BAA0B,CAAI,CAAC,cACnC/B,IAAA,MAAG4B,SAAS,CAAC,YAAY,CAAAG,QAAA,CAAC,kDAAgD,CAAG,CAAC,EACrE,CAAC,cACd/B,IAAA,CAACP,IAAI,CAAC2C,IAAI,EAAAL,QAAA,CACLvB,cAAc,CAAC6B,MAAM,GAAK,CAAC,cACxBnC,KAAA,CAACP,KAAK,EAAC2C,OAAO,CAAC,SAAS,CAACV,SAAS,CAAC,aAAa,CAAAG,QAAA,eAC5C/B,IAAA,CAACL,KAAK,CAAC4C,OAAO,EAAAR,QAAA,CAAC,oBAAkB,CAAe,CAAC,cACjD/B,IAAA,MAAA+B,QAAA,CAAG,0FAAwF,CAAG,CAAC,EAC5F,CAAC,cAER/B,IAAA,CAACT,GAAG,EAAAwC,QAAA,CACCvB,cAAc,CAACgC,GAAG,CAACC,IAAI,eACpBzC,IAAA,CAACR,GAAG,EAAC0C,EAAE,CAAE,CAAE,CAAeN,SAAS,CAAC,MAAM,CAAAG,QAAA,cACtC/B,IAAA,CAACP,IAAI,EACDmC,SAAS,cAAAc,MAAA,CAAe5B,YAAY,GAAK2B,IAAI,CAACE,EAAE,CAAG,gBAAgB,CAAG,EAAE,CAAG,CAC3Ed,KAAK,CAAE,CAAEe,MAAM,CAAE,SAAU,CAAE,CAC7BC,OAAO,CAAEA,CAAA,GAAM9B,eAAe,CAAC0B,IAAI,CAACE,EAAE,CAAE,CAAAZ,QAAA,cAExC7B,KAAA,CAACT,IAAI,CAAC2C,IAAI,EAACR,SAAS,CAAC,aAAa,CAAAG,QAAA,eAC9B/B,IAAA,OAAA+B,QAAA,CAAK,GAAI,CAAAe,IAAI,CAACL,IAAI,CAACM,YAAY,CAAC,CAACC,kBAAkB,CAAC,CAAC,CAAK,CAAC,cAC3DhD,IAAA,MAAG4B,SAAS,CAAC,MAAM,CAAAG,QAAA,CACd,GAAI,CAAAe,IAAI,CAACL,IAAI,CAACM,YAAY,CAAC,CAACE,kBAAkB,CAAC,EAAE,CAAE,CAChDC,IAAI,CAAE,SAAS,CACfC,MAAM,CAAE,SACZ,CAAC,CAAC,CACH,CAAC,cACJnD,IAAA,CAACN,MAAM,EACH4C,OAAO,CAAExB,YAAY,GAAK2B,IAAI,CAACE,EAAE,CAAG,SAAS,CAAG,iBAAkB,CAClES,IAAI,CAAC,IAAI,CACTP,OAAO,CAAGQ,CAAC,EAAK,CACZA,CAAC,CAACC,eAAe,CAAC,CAAC,CACnBlC,mBAAmB,CAACqB,IAAI,CAACE,EAAE,CAAC,CAChC,CAAE,CACFY,QAAQ,CAAE3C,OAAQ,CAAAmB,QAAA,CAEjBnB,OAAO,EAAIE,YAAY,GAAK2B,IAAI,CAACE,EAAE,CAChC,YAAY,CAAG,kBAAkB,CAEjC,CAAC,EACF,CAAC,CACV,CAAC,EA5BMF,IAAI,CAACE,EA6BjB,CACR,CAAC,CACD,CACR,CACM,CAAC,EACV,CAAC,CACN,CAAC,CACL,CAAC,CACC,CAAC,CAEpB,CAAC,CAED,cAAe,CAAAxC,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}